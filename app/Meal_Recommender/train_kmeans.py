# -*- coding: utf-8 -*-
"""train_kmeans

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1__lV75QWHXK9IxpEGZH0FQcXI8fMsFpF
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans 
import csv

path = '/content/drive/My Drive/'
path = './'
userid_col = "USER_ID"
top_n = 50

def Load_Data(csvpath, ColumnList, sep=None):
  
  print("Loading data from ", csvpath)
  if sep==None:
    data = pd.read_csv(csvpath)[ColumnList]
  else:
    data = pd.read_csv(csvpath, sep=sep)[ColumnList]
  print ("number of rows, cols ", data.shape)
  if 'customers' in csvpath:
    print ("unique cust: ",len(data['USER_ID'].unique()))
  elif 'products' in csvpath:
    print ("unique prods: ", len(data['ProductID'].unique()))
  return data

# Run this cell to mount your Google Drive.
from google.colab import drive
drive.mount('/content/drive')

def visualizeSalesPerCustomer(sales_data):
  global userid_col

  #create index
  sales_data_idx = pd.Index(sales_data[userid_col])
  
  num_orders_per_cust = sales_data_idx.value_counts() # series of number of orders for each unique customer
  num_orders_per_cust_list = num_orders_per_cust.tolist()
  cust_id_list = num_orders_per_cust.index.values.tolist()
  
  return num_orders_per_cust_list, cust_id_list

def plot_bar_x(x, y):
    # this is for plotting purpose

    index = np.arange(len(x))
    plt.figure(figsize=(10,8))
    plt.bar(index, y)
    plt.xlabel('cust id', fontsize=5)
    plt.ylabel('No of Orders', fontsize=5)
    plt.xticks(index, y, fontsize=5, rotation=30)
    plt.title('Cust-Order')
    plt.show()

def Combine_Data(sales_data, customer_data, products_data, x):
  global userid_col
  
  print("Combining data...")
  sales_data = sales_data[sales_data[userid_col].isin(x)]


  sale_location_data = pd.merge(sales_data, customer_data, on=userid_col)
  Data = pd.merge(sale_location_data, products_data, on='ProductID')
  
  return Data

def Data_Processing(sales_data, customer_data, products_data, x): 
  global userid_col
  Data = Combine_Data(sales_data, customer_data, products_data, x)
  
  print("Processing Data...")
  SortedData = Data.sort_values([userid_col, "SalesDate", "SalesID", "ProductID"], ascending=[True, True, True, True])
  Final_Data = Data.dropna(subset=[userid_col, "SalesID", "ProductID","SalesDate", "Quantity"])
  
  return Final_Data

def Get_Quantity(Data, Cust_id, Prod_id):
  global userid_col
  Cust_Id_Filter = Data.loc[Data[userid_col]==Cust_id]
  Prod_Id_Filter = Cust_Id_Filter.loc[Cust_Id_Filter['ProductID']==Prod_id]
  Prod_Quantity = np.sum(Prod_Id_Filter['Quantity'])
  return Prod_Quantity

def Build_CoOccurence_Mat(Data):
  global userid_col
  Customer_Ids = Data[userid_col].unique()
  Product_Ids = Data['ProductID'].unique()
  
  No_Customers = Customer_Ids.shape[0]
  No_Features = Product_Ids.shape[0]
  print ("co-occurrence matrix for ", No_Customers, " customers")
  mat = np.zeros((No_Customers, No_Features))
  
  for i in range(0,No_Customers) : 
    for j in range(0,No_Features) : 
      
      Cust_Id = Customer_Ids[i]
      Prod_Id = Product_Ids[j]
      IsPurchased = Get_Quantity(Data, Cust_Id, Prod_Id)
      
      if(IsPurchased > 0):
        mat[i][j] = 1
  
  return mat

def doKMeans(Mat):
  kmeans = KMeans(n_clusters=6, random_state=0).fit(Mat)
  print("kmeans : ",kmeans)
  print("Cluster means: ")
  print(kmeans.cluster_centers_)
  
  for i in range(len(kmeans.cluster_centers_)):
#   print(kmeans.cluster_centers_[i])
      filename = "centroids_"+str(i)+".csv"
    #   print(filename)
#       print("Creating File: ",filename)
      csvfile = open(filename, 'w')
      writer = csv.writer(csvfile)
      writer.writerow(kmeans.cluster_centers_[i])
      csvfile.close()
  print("Cluster labels :", kmeans.labels_)
    
  labels = kmeans.labels_
  User_Ids = []
  for i in range(6):
    filename = str(i)+"_ids.csv"
#     print("Creating File: ",filename)
    csvfile = open(filename, 'w')
    csvread = open(filename, 'r')
    for user in range(len(labels)):
      if labels[user] == i:
        csvfile.write(str(user)+",")
    for row in csv.reader(csvread):
      csv.writer.writerow(row[:-1])
    csvfile.close()

def doAll():
  global userid_col
  global top_n
  sales_data_init = Load_Data(path+"sales.csv", ["SalesID", userid_col, "ProductID", "Quantity", "SalesDate"], sep=';')
  header =  ["SalesID", userid_col, "ProductID", "Quantity", "SalesDate"]
  sales_data_init.to_csv("final_sales.csv", columns=header)
  sales_data = Load_Data("final_sales.csv",["SalesID",userid_col, "ProductID", "Quantity", "SalesDate"], sep=',')
  
  customer_data_our = Load_Data(path+"USER.csv", [userid_col, "NAME", "EMAIL_ID","GENDER","AGE"])
  product_data_our = Load_Data(path+"PRODUCT.csv", ["ProductID", "ProductName"])
  print("\n")
  y, x = visualizeSalesPerCustomer(sales_data)

  x = x[:top_n]
  y = y[:top_n]
  plot_bar_x(x,y)
  
  Final_Data = Data_Processing(sales_data, customer_data_our, product_data_our, x)
  final_data_export = Final_Data.to_csv('finalData.csv', header=True)
  
  Mat = Build_CoOccurence_Mat(Final_Data)
  Mat = pd.DataFrame(Mat)
  
  doKMeans(Mat)

doAll()